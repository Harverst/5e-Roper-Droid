
import java.lang.Enum<>

// use ordinal
// implemented
public enum Ability {
  STRENGTH,
  DEXTERITY,
  CONSTITUTION,
  INTELLIGENCE,
  WISDOM,
  CHARISMA
}

// implemented
public enum Skill {
  ACROBATICS,
  ANIMAL_HANDLING,
  ARCANA,
  ATHLETICS,
  DECEPTION,
  HISTORY,
  INSIGHT,
  INTIMIDATION,
  INVESTIGATION,
  MEDICINE,
  NATURE,
  PERCEPTION,
  PERFORMANCE,
  PERSUASION,
  RELIGION,
  SLEIGHT_OF_HAND,
  STEALTH,
  SURVIVAL
}

// implemented
public enum DamageType {
  ACID,
  BLUDGEONING,
  COLD,
  FIRE,
  FORCE,
  LIGHTNING,
  NECROTIC,
  PIERCING,
  POISON,
  PSYCHIC,
  RADIANT,
  SLASHING,
  THUNDER
}

// 
interface ScoreModifier implements Comparable
  // Precedence determines the order in which modifiers are applied
  public int getPrecedence()
  // Modify is used to calculate the final value of score
  public int modify(int oldValue)

class NullModifier implements ScoreModifier

// A very simple score modifier
class AdditiveScoreModifier implements ScoreModifier
  AdditiveScoreModifier(int addend, int precedence)

class MultiplicativeScoreModifier implements ScoreModifier
  MultiplicativeScoreModifier(int multiplier, int precedence)

class DivisionScoreModifier implements ScoreModifier
  DivisionScoreModifier(int divisor, int precedence)

// Something closer to typedef would be better but drop out the ScoreGroupModifer group generally
import java.util.List

interface ScoreGroup implements List<Score>
  public void addModifier(List<ScoreModifier>)
  public void removeModifier(List<ScoreModifier>)

interface AbilityModifier implements List<ScoreModifier>

// implements the list to maintain the same length as the enum
interface SkillModifier implements List<ScoreModifier>

// implements the list to maintain a constant length of 13
interface DamageModifier implements List<ScoreModifier>

interface CharacterModifier
  public AbilityModifier abilities(); // ability modifiers
  public SkillModifier skills(); // skill modifiers
  public DamageModifier damage(); // damage resistances or vulnerabilities

// Should calculate the score on the fly based on the modifiers
// All scores can behave as modifiers
interface Score
  public int getValue()
  public void addModifier(ScoreModifier)
  public void removeModifier(ScoreModifier)

class ScoreGroup implements ScoreGroupModifier
  void addModifier(ScoreGroupModifier);
  void removeModifier(ScoreGroupModifier);
  ScoreGroup(unsigned int numScores)
  int getValue()

// precedence for AbilityScores, SkillScores, and DamageResistances is 0
class BasicScore implements Score
  private TreeList<ScoreModifier>
  public int baseValue;
  public int getValue();
  public int modify(int oldValue);

// The six classic abilities
class AbilityScore extends BasicScore
  public int modify(int oldValue)

class SkillScore extends BasicScore
  public int modify(int oldValue)

class DamageScore extends BasicScore
  public int modify(int oldValue)

class DamageResistance implements ScoreModifier
  public int modify

class SavingThrowScore
  int baseValue;
  int getModifier()


// A class representing the six classic attributes
class AbilityGroup : ScoreGroup(6)
  Score getScore(enum Ability);
  ScoreModifier getSkillModifier();
  ScoreModifier getSaveModifier();

class SkillGroup : ScoreGroup(18)
  void addModifier(SkillScoreGroupModifier);
  void removeModifier(SkillScoreGroupModifier);
  Score getScore(enum Skill);

class SavingThrowGroup : ScoreGroup(6)
  void addModifier(SavingThrowGroupModifier);
  Score getScore(enum Ability);

// Used as a base for classes and races
class CharacterModifier
  AbilityModifier abilityModifier;
  SkillModifier skillModifier;

interface Proficiency

class SkillProficiency : Proficiency
  enum Skill

class SavingThrowProficiency : Proficiency
  enum Ability

// Weapons can't be handled as an enum
// considering weapons can really take any form whatsoever
class WeaponProficiency : Proficiency


class Equipment
  

class EquipmentLibrary


Class Character
  unsigned int getExperience();
  unsigned int getHitPointMaximum();
  int getCurrentHitPoints();
  AbilityScoreGroup getScores();

